---
title: "Lici_Díaz.Rmd"
author: "Lici Díaz"
date: "5/12/2022"
output:
  pdf_document: default
  html_document: default
---

```{r}
#install.packages("reshape2") 
#install.packages("reshape")
#install.packages("nycflights13")
#install.packages("tableone")
#install.packages("rvest")
install.packages("yarrr")
install.packages("aqp")
install.packages("soilDB")
install.packages("package")
install.packages("GGally")
install.packages("expss")
library(expss)
library(GGally)
library(aqp)
library(soilDB)
library(tidyr)
library(MASS) 
library(reshape2) 
library(reshape)
library(Hmisc)
library(psych)
library(ggpubr)
library(readr)
library(tibble)
library(dplyr) 
library(magrittr)
library(lubridate)
library(nycflights13)
library(tableone)
library(survival)
library("yarrr")
library("ggplot2")
library("scales")
library(stats)
```

*Dataframe from csv files:*

```{r example_lab_data, synthetic_data}
example_lab_data <- read.table('example_lab_data.csv', sep=',', header=TRUE)
head(example_lab_data)
synthetic_data <- read.table('synthetic_data.csv', sep=',', header=TRUE)
head(synthetic_data)
```

*Remove any extraneous rows or columns:*

*Ensure that columns with numeric variables don’t have characters*
#Count number of nulls per column

```{r}
nullsum_example_lab_data <- sapply(example_lab_data, function(x) sum(is.na(x))) 
nullsum_synthetic_data <- sapply(synthetic_data, function(x) sum(is.na(x)))

```
#drop columns with NA > 300 observations:

```{r}
synthetic_data <- synthetic_data[,!names(synthetic_data) %in% c("diagnosis_icd10","supplemental_diagnoses", "bsa", "distal_perfusion",
 "trauma", "infective_endocarditis",  "severity_score", "insurance",   "il_6_blockers", "antivirals","antimalarials", "number_pt_visits_total_hosp_stay","or_cannulation", "steroid_name", "complication_mechanical", "mcs12", "qal_ys", "pcs12", "monoclonal_ab_treatment","total_charges","or_cannulation", "complication_patient_limb", "complication_pulmonary", "complication_renal", "complication_hemorrhage", "complication_mechanical", "complication_neurological", "complication_cardiovascular", "complication_metabolic", "cpc_score")]
```


*Review patient IDs and address repeated patients:*


*For synthetic_data*

```{r}
repeated_patients_syntetic_data <- data.frame(table(synthetic_data$patient_id))
repeated_patients_syntetic_data <- repeated_patients_syntetic_data[repeated_patients_syntetic_data$Freq > 1,]

```

*tells you which patient_id occurred more than once:*

```{r}
synthetic_data[synthetic_data$patient_id %in% repeated_patients_syntetic_data$Var1[repeated_patients_syntetic_data$Freq > 1],]
```

*drop duplicate patient_id, use only the first (oldest) visit:*

#For synthetic_data, Sort dataframe by patient_id and admission_date:

```{r}
synthetic_data <- synthetic_data[order(synthetic_data$patient_id,synthetic_data$admission_date ),]

filter(synthetic_data, patient_id == "sT8IH3ZooD")
```

#Drop duplicates dataframe by patient_id:

```{r}
synthetic_data <- synthetic_data[!duplicated(synthetic_data$patient_id), ]
```

*Ensure that columns with numeric variables don’t have characters*

#Fill empty values with NA:

```{r}
example_lab_data[example_lab_data == ''] <- NA
synthetic_data[synthetic_data == ''] <- NA
example_lab_data[example_lab_data == 'UTC'] <- NA
synthetic_data[synthetic_data == 'UTC'] <- NA
example_lab_data[example_lab_data == 'NDA'] <- NA
synthetic_data[synthetic_data == 'NDA'] <- NA
example_lab_data[example_lab_data == 'N/A'] <- NA
synthetic_data[synthetic_data == 'N/A'] <- NA
```

#find character on numeric columns:

```{r}
synthetic_data[synthetic_data == 'Not Available' ] <- NA
synthetic_data[synthetic_data == 'no info from OSH' ] <- NA
synthetic_data[synthetic_data == 'No data avail' ] <- NA
synthetic_data[synthetic_data == 'Not Measured, pt coded' ] <- NA
synthetic_data[synthetic_data == 'not measured' ] <- NA

synthetic_data$ph <- parse_number(synthetic_data$ph)
synthetic_data
```

#Some variables will have more than one value in the same cell, separated by a comma. 

*Use average for mechanical_vent_days in days not hours*

#drop first row (just NA values)

```{r}
synthetic_data = synthetic_data[-1,]
```
*Evaluate if categorical variables have any category with a low frequency:*

#Uses frecuency tables:

#standarizes sex colum:

```{r}
synthetic_data$sex[synthetic_data$sex == 'Female'] <- "F"
synthetic_data$sex[synthetic_data$sex == 'Male'] <- "M"


table(synthetic_data$sex)


table(synthetic_data$race)

table(synthetic_data$diagnosis)

table(synthetic_data$reintubation)

table(synthetic_data$trached)


table(synthetic_data$systemic_anticoagulation_type)

table(synthetic_data$acute_kidney_injury)

table(synthetic_data$discharge_location)

synthetic_data$steroids[synthetic_data$steroids == 'Unk'] <- "unk"
synthetic_data$steroids[synthetic_data$steroids == 'unk'] <- NA
table(synthetic_data$steroids)


synthetic_data$infection[synthetic_data$infection == 'R/V/SARS CoV19'] <- 'SARS CoV19'
synthetic_data$infection[synthetic_data$infection == 'R/V/COVID-19'] <- 'SARS CoV19'
synthetic_data$infection[synthetic_data$infection == 'Hx of COVID19 - 1/2022'] <- 'SARS CoV19'
synthetic_data$infection[synthetic_data$infection == 'P/R/V/ Covid-19, P/R/GM+/ Strep sp, P/B/GM+/ Staph captis'] <- 'SARS CoV19'


synthetic_data$infection[synthetic_data$infection != 'SARS CoV19'] <- 'Other'

table(synthetic_data$infection)

table(synthetic_data$support_type)

table(synthetic_data$transfer)

table(synthetic_data$covid)

table(synthetic_data$pregnant)

table(synthetic_data$mechanical_vent_days)
```

#for example_lab_data:

```{r}
table(example_lab_data$lab_exam) 
```

*Make sure that time variables are consistently coded:*
#convert char column into posixct

```{r}
synthetic_data[['admission_date']] <- as.POSIXct(synthetic_data[['admission_date']],
                                   format = "%Y-%m-%d")
                                   

synthetic_data[['discharge_date']] <- as.POSIXct(synthetic_data[['discharge_date']],
                                   format = "%Y-%m-%d")

synthetic_data[['death_date']] <- as.POSIXct(synthetic_data[['death_date']],
                                   format = "%Y-%m-%d")
```

#for example_lab_data:

```{r}
example_lab_data[['date']] <- as.POSIXct(example_lab_data[['date']],
                                   format = "%Y-%m-%d")
```

*Evaluate categorical variables:*

#for that, first convert to factors:

```{r}
#example_lab_data$lab_exam <- as.factor(example_lab_data$lab_exam)     

synthetic_data$sex <- as.factor(synthetic_data$sex) 
synthetic_data$race  <- as.factor(synthetic_data$race) 
synthetic_data$diagnosis  <- as.factor(synthetic_data$diagnosis) 
synthetic_data$reintubation  <- as.factor(synthetic_data$reintubation) 
synthetic_data$trached  <- as.factor(synthetic_data$trached) 

synthetic_data$systemic_anticoagulation_type <- as.factor(synthetic_data$systemic_anticoagulation_type) 

synthetic_data$acute_kidney_injury <- as.factor(synthetic_data$acute_kidney_injury)
 
synthetic_data$discharge_location <- as.factor(synthetic_data$discharge_location)
 
synthetic_data$steroids <- as.factor(synthetic_data$steroids)
synthetic_data$infection <- as.factor(synthetic_data$infection)
synthetic_data$support_type <- as.factor(synthetic_data$support_type)
synthetic_data$transfer <- as.factor(synthetic_data$transfer)
synthetic_data$covid <- as.factor(synthetic_data$covid)
synthetic_data$pregnant <- as.factor(synthetic_data$pregnant)
synthetic_data$mechanical_vent_days <- as.factor(synthetic_data$mechanical_vent_days)
synthetic_data$proning <- as.factor(synthetic_data$proning)
```

*Evaluate the distribution of numeric variables:*

*We can evaluate normality according to swek and kurtosis:*
#statistical summary number variables:

```{r}
describe(synthetic_data$weight_kg)
describe(synthetic_data$height_cm)
describe(synthetic_data$bmi)
describe(synthetic_data$ph)
describe(synthetic_data$co2)
describe(synthetic_data$o2)
describe(synthetic_data$lactate_peak)
describe(synthetic_data$creatinine_peak)
describe(synthetic_data$total_bilirubin_peak)
describe(synthetic_data$hospital_los)
describe(synthetic_data$days_to_discharge)
```

*normal graph*

#As all the points fall approximately along this reference line, we can assume normality.

``` {r synthetic_data}
ggqqplot(synthetic_data$weight_kg)
ggqqplot(synthetic_data$height_cm)
ggqqplot(synthetic_data$bmi)
ggqqplot(synthetic_data$ph)
ggqqplot(synthetic_data$co2)
ggqqplot(synthetic_data$o2)
ggqqplot(synthetic_data$lactate_peak)
ggqqplot(synthetic_data$creatinine_peak)
ggqqplot(synthetic_data$total_bilirubin_peak)
ggqqplot(synthetic_data$hospital_los)
ggqqplot(synthetic_data$days_to_discharge)
```

*not normal numeric variables:*

synthetic_data$bmi
synthetic_data$o2
synthetic_data$lactate_peak
synthetic_data$total_bilirubin_peak
synthetic_data$hospital_los
synthetic_data$days_to_discharge

*If a numeric variable does not have a normal distribution, you may log transform it and re-evaluate the distribuion:*

#log transformation:

```{r}
synthetic_data$bmi_log = log(synthetic_data$bmi)
```

#graph to evaluate normality

```{r synthetic_data log}
ggqqplot(synthetic_data$bmi_log)


synthetic_data$o2_log = log(synthetic_data$o2)
ggqqplot(synthetic_data$o2_log)

synthetic_data$lactate_peak_log = log(synthetic_data$lactate_peak)
ggqqplot(synthetic_data$lactate_peak_log)

synthetic_data$total_bilirubin_peak_log = log(synthetic_data$total_bilirubin_peak)
ggqqplot(synthetic_data$total_bilirubin_peak_log)

synthetic_data$hospital_los_log = log(synthetic_data$hospital_los)
ggqqplot(synthetic_data$hospital_los_log)

synthetic_data$days_to_discharge_log = log(synthetic_data$days_to_discharge)
ggqqplot(synthetic_data$days_to_discharge_log)
```
*Bonus challange: Convert dataframe to tibble:*

```{r}
synthetic_data <- as.tbl(synthetic_data)
example_lab_data <- as.tbl(example_lab_data)
```

*To link the example_lab_data with synthetic_data i decide that is not well done calculate the mean of the values, because there are taken on too many different times, and some values are not even near to each other, so I decide to link it by the year and month and patient_id*


#Create a column "month" and "year" for synthetic data:
```{r}

synthetic_data$month_discharge = month(as.POSIXlt(synthetic_data$discharge_date, format="%d/%m/%Y"))

synthetic_data$month_admission = month(as.POSIXlt(synthetic_data$admission_date, format="%d/%m/%Y"))

synthetic_data$year_admission = year(as.POSIXlt(synthetic_data$admission_date, format="%d/%m/%Y"))

synthetic_data$year_discharge = year(as.POSIXlt(synthetic_data$discharge_date, format="%d/%m/%Y"))

```
#Create a column "year" and "month" for example_lab_data:

```{r}
example_lab_data$month = month(as.POSIXlt(example_lab_data$date, format="%d/%m/%Y"))
example_lab_data$year = year(as.POSIXlt(example_lab_data$date, format="%d/%m/%Y"))

```
#cchange format for example_lab_data from long to wide:
```{r}
example_lab_data_wide <- pivot_wider(
  example_lab_data,
  id_cols = NULL,
  id_expand = FALSE,
  names_from = lab_exam,
  values_from = result)
print(example_lab_data_wide)
```

*Left join synthetic_data with example_lab_data_wide:*

#This join able to concate all the data, for extract coherent data for the time that the patient was on the hospital, could be based on admission_date or discharge_date:

```{r}
linkdataset <- merge(x = synthetic_data, y = example_lab_data_wide, by = "patient_id")
```
#to obtaind coherent lab_exam values, gonna choose those lab exam who was made the year when the patient was on the hospital and drop the others. 

```{r}
linkdataset_year <- subset(linkdataset, linkdataset$year.y == linkdataset$year_admission)
```

#And with linkdataset_year, gonna choose those patient_id where the month of the lab exam was taken between the months of the patients on the hospital, it means between the month of admission or discharche, that because is is not coherent take information about the lab exams about the patient where they was not on the hospital, conditions of the patient could change between months and years, some values are too far from each other to make an average. This is an small dataset, but this information is enough trusted to realize if those lab exams results have relationship with the output variable of the model, on other way, we can take the large dataset without this lab exams, but after check correlation between the variables:

```{r}
linkdataset_month <- subset(linkdataset_year, linkdataset$month >= linkdataset$month_admission & linkdataset$month <= linkdataset$month_discharge)

linkdataset_month <- subset(linkdataset_year, linkdataset_year$month >= linkdataset_year$month_admission & linkdataset_year$month <= linkdataset_year$month_discharge)

linkdataset_month

```
**Exploratory analysis**

*Summary table stratified by covid diagnosis:*

#first have to separate variable between numeric and categorical:

# first prepare the function variables:

```{r}

#all variables except those who aren't part of the satistical analysis:
myVars <- colnames(linkdataset_month[,!names(linkdataset_month) %in% c("covid","patient_id", "year.y", "month_discharge","month_admission", "year_admission", "year_discharge", "month", "year.x" )])

#select categorical variables:
catVars <- c("sex", "race", "diagnosis", "reintubation", "trached", "systemic_anticoagulation_type", "acute_kidney_injury", "discharge_location", "steroids", "infection", "support_type", "transfer", "pregnant", "mechanical_vent_days")

#wasn't necessary use "factorVars" argument, because i already did the factor trasnformation for the cat variables on line 215 -237, there isn't also not normal variables, thaks to the log transformation:

#Summary table:
tab <- CreateTableOne(vars = myVars, strata = "covid", data = linkdataset_month)

print(tab, formatOptions = list(big.mark = ","))

summary(tab)

```

*Create a pirate plot as well as a scatterplot with a smooth spline using any
variables of your choice:*

*For this analysis i use "linkdataset" data:*

```{r}
#pireplot

pirateplot(formula = hospital_los_log ~ infection, 
           data = linkdataset,
           pal = "pony", 
           main = "infection vs hospital_days") 



#interpretation: 

#People who have been diagnosed with COVID-19 have higer mean of days in hospital that patients with other infections. Also, distribution of points for non sars cov 19 infection are is more dispersed than for covid 19 patients. As this graph shows, the non covid patients could be more days in hospital, but the mean of days that a covid patients spends on hospital is higer.

```

```{r}
#on the other hand, if we want to obtain relationship for icu_los and infection:

pirateplot(formula = icu_los ~ infection, 
           data = linkdataset,
           pal = "pony", 
           main = "infection vs icu_los") 

#the plot shows that covid infection data are dispersed, it could be because of the complicated cases, but the mean of the data for covid19 cases are slowly smaller than other infections.
```

```{r}
#scatterplot:

x <- linkdataset$icu_los
y <- linkdataset$co2


# Plot with main and axis titles
# Change point shape (pch = 19) and remove frame.
plot(x, y, main = "icu_los vs co2",
     xlab = "icu_los", ylab = "co2",
     pch = 19, frame = FALSE,
     #xlim = c(20, 60),
     ylim = c(0, 150), theme = "The economist")

#What we can analyze from this graph that when co2 is higer, more days on icu could be the patient, but is not too clear the relationship.

```
# chi square test to evaluate correlation between catogorical variables of linkdataset:
```{r}

#H0:the two variables are independent, Ha: Two variables are dependent, if p-value < 0.05 so H0 has to be rejected:

tablesex <- table(linkdataset$sex, linkdataset$covid)
chisq.test(tablesex, correct=FALSE)


#We have a chi-squared value of 0.06604. Since we get a p-Value higer than the significance level of 0.05, we can't reject the null hypothesis and conclude that the two variables are in fact independent.

tablerace <- table(linkdataset$race, linkdataset$covid)
chisq.test(tablerace, correct=FALSE)

tablediagnosis <- table(linkdataset$diagnosis, linkdataset$covid)
chisq.test(tablediagnosis, correct=FALSE)

tablereintubation <- table(linkdataset$reintubation, linkdataset$covid)
chisq.test(tablereintubation, correct=FALSE)

tabletrached <- table(linkdataset$trached, linkdataset$covid)
chisq.test(tabletrached, correct=FALSE)

tablemechanical <- table(linkdataset$mechanical_vent_days, linkdataset$covid)
chisq.test(tablemechanical, correct=FALSE)

tableacutekidney <- table(linkdataset$acute_kidney_injury, linkdataset$covid)
chisq.test(tableacutekidney, correct=FALSE)

tabledischarge <- table(linkdataset$discharge_location, linkdataset$covid)
chisq.test(tabledischarge, correct=FALSE)

tablesteroids <- table(linkdataset$steroids, linkdataset$covid)
chisq.test(tablesteroids, correct=FALSE)

tablesuppor <- table(linkdataset$support_type, linkdataset$covid)
chisq.test(tablesuppor, correct=FALSE)

tabletransfer <- table(linkdataset$transfer, linkdataset$covid)
chisq.test(tabletransfer, correct=FALSE)

```
*conclude: sex, diagnosis, trached, mechanical_vent_days, discharge*

*To analyze numerical variables, we can use a scatterplot matrix, to evaluate linear correlation between some variables:*
```{r}
data <- (linkdataset[,!names(linkdataset) %in% c("patient_id", "year.y", "month_discharge","month_admission", "year_admission", "year_discharge", "month", "year.x", "weight_kg", "height_cm","sex", "race", "diagnosis", "reintubation", "trached", "systemic_anticoagulation_type", "acute_kidney_injury", "discharge_location", "steroids", "infection", "support_type", "transfer", "pregnant", "mechanical_vent_days", "proning", "total_bilirubin_peak","o2", "days_to_discharge","admission_date", "discharge_date", "death_date", "date", "Hematocrit", "Cholesterol", "CRP", "Platelets", "Glucose", "Lymphocytes", "bmi", "lactate_peak", "age", "creatinine_peak", "hospital_los", "lactate_peak_log", "covid", "total_bilirubin_peak_log", "days_to_discharge_log")])

plot(data, pch=20 , cex=1.5 , col="#69b3a2")
ggpairs(data)

data1 <- (linkdataset[,!names(linkdataset) %in% c("covid","patient_id", "year.y", "month_discharge","month_admission", "year_admission", "year_discharge", "month", "year.x", "weight_kg", "height_cm", "ph", "co2", "bmi_log", "o2_log", "sex", "race", "diagnosis", "reintubation", "trached", "systemic_anticoagulation_type", "acute_kidney_injury", "discharge_location", "steroids", "infection", "support_type", "transfer", "pregnant", "mechanical_vent_days", "proning", "total_bilirubin_peak","o2", "days_to_discharge","admission_date", "discharge_date", "death_date", "date", "Hematocrit", "Cholesterol", "CRP", "Platelets", "Glucose", "Lymphocytes", "bmi", "bmi_log", "lactate_peak")])

plot(data1 , pch=20 , cex=1.5 , col="#69b3a2")
ggpairs(data1)




```
*Numeric variables could be related:*
#don't matter if the r2 are too small... for the excercise:

*With icu_los: pH, co2, o2; With hospital_los: pH, co2*

*This  is helpful to build the GML model.

*As the goal of this study will be to evaluate the outcomes of COVID-19 patients compared to non-COVID-19 patients. Outcomes may include (but are not limited to) hospital length of stay (LOS), intensive care unit (ICU) LOS, and mortality*

#for mortalitiy i'm gonna use this variable "death_date":

```{r}
linkdataset$death <- linkdataset$death_date
linkdataset$death <- as.character(linkdataset$death)

linkdataset$death[linkdataset$death != "NA"] <- "TRUE"
linkdataset$death[is.na(linkdataset$death)] = "FALSE"

#and evaluate the new variable:

linkdataset$death <- as.factor(linkdataset$death)

pirateplot(formula = hospital_los_log ~ death, 
           data = linkdataset,
           pal = "pony", 
           main = "death vs hospital_los") 

pirateplot(formula = icu_los ~ death, 
           data = linkdataset,
           pal = "pony", 
           main = "death vs icu_los") 

#chisquare to covid:

tabledeathdeath <- table(linkdataset$death, linkdataset$covid)
tabledeathdeath
chisq.test(tabledeathdeath, correct=FALSE)

cross_cases(linkdataset, covid, death)

#first graph "death vs hospital_los" show us that for those who not die the mean of the days on hospital was slowly higer than those who die. Also the second graph "death vs icu_los", tell us that patients who survive have a mean slowly higer than patient who doesn't.

#Also, frecuency table for covid tell us that patients who die with covid are lower than those who die and haven't covid. It could be also interested evaluate death and infection:


cross_cases(linkdataset, death, infection)

#as we can see, the frecuency of death related with covid infection was equivalent to the death associated to other infections

```


```{r}
pirateplot(formula = icu_los ~ covid, 
           data = linkdataset_month,
           pal = "pony", 
           main = "Covid vs icu_los") 
```
```{r}
pirateplot(formula = hospital_los ~ covid, 
           data = linkdataset_month,
           pal = "pony", 
           main = "Covid vs hospital_los") 
```
*As we can see here have more hospital_los, and icu_los for COVID false patients.*

*Now we can use variable "discharge_location" to find deaths related to covid:*


*Modeling: Create simple glm models with a Gaussian as well as logistic distributions. Then state in a couple of lines how you would interpret the results:*

```{r}

#For modeling i use the conclusion from the exploratory analysis, as well when i use all the variables for covid prediction, using a binomial family, and also other taht could affect:

g1 <- glm(covid ~ sex + age + bmi_log + reintubation + steroids + diagnosis + trached + discharge_location + icu_los + ph + o2 + hospital_los_log + lactate_peak_log, family = binomial(link = "logit"), data = linkdataset)

summary(g1)

#The model has no sense, so i use drop some of the variables

g1 <- glm(covid ~ sex + o2 + hospital_los_log + lactate_peak_log, family = binomial(link = "logit"), data = linkdataset)

summary(g1)

#And let those who have a p value < 0.05

pred_prob <- predict(g1, linkdataset, type = "response")
train$pred_class <- ifelse(g1$fitted.values >= 0.5, ">50K", "<=50K")
# Generating the classification table
```



```{r}
library(caTools)

#make this example reproducible
set.seed(1)

#use 70% of dataset as training set and 30% as test set
sample <- sample.split(linkdataset$covid, SplitRatio = 0.7)
train  <- subset(linkdataset, sample == TRUE)
test   <- subset(linkdataset, sample == FALSE)

g1 <- glm(covid ~ sex + o2 + hospital_los_log + lactate_peak_log, family = binomial(link = "logit"), data = train)

summary(g1)

*From this model we can conclude:*
#Intercept indicates the log of odds of the whole population who was diagnosticated with covid 19,  with no predictor variables in the model. We can convert odds to probability with:
  

 p = exp(-1.912265)/(1+exp(-1.912265))

#it means that there is a 12% of probability of have covid TRUE with just the intercept and no having in account the other variables of the model.
  
  
#The beta coefficient of the variables for sex, o2, hospital_los_log and lactate_peak_log are: 1.454582, 0.006208, -0.596374, 0.531509 respectively,  which is in the logit of odds terms. When we convert this to odds by taking:

exp(1.454582)
exp(0.006208)
exp(-0.596374)
exp(-0.531509)

#for all the variables, except hospital_los, the probability of have covid positive (compare with negative) increases with with the result of each exponential result. For hospilar_los is the opposite, decrease the porbaiblity of have covid positive with the increase of the variable.
```
```{r}
#GLm: Gaussian model

g2 <- glm(hospital_los_log ~ icu_los + co2 +  o2+ covid + lactate_peak_log + creatinine_peak +  sex, family = gaussian, data = train)

summary(g2)

#As can we analyze for variables like icu_los, lactate_peak_log and creatinine_peak, the factors multiplies the variables and increase the days on hospital meanwhile, for co2 and o2 happends the opposite. And also, for covidTRUE decrease the days on hospital, even through we can think the opposite, but the data show us this result.

```


